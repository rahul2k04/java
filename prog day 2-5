import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

abstract class AbstractStats {
    public abstract int total(int[] numbers);
    public abstract double average(int[] numbers);

    public double mean(int[] numbers) {
        return total(numbers) / (double) numbers.length;
    }

    public int mode(int[] numbers) {
        Map<Integer, Integer> countMap = new HashMap<>();
        int maxCount = 0;
        int mode = 0;

        for (int num : numbers) {
            int count = countMap.getOrDefault(num, 0) + 1;
            countMap.put(num, count);
            if (count > maxCount) {
                maxCount = count;
                mode = num;
            }
        }

        return mode;
    }

    public double median(int[] numbers) {
        Arrays.sort(numbers);
        int n = numbers.length;
        if (n % 2 == 0) {
            return (numbers[n / 2 - 1] + numbers[n / 2]) / 2.0;
        } else {
            return numbers[n / 2];
        }
    }
}

class ConcreteStats extends AbstractStats {
    public int total(int[] numbers) {
        int sum = 0;
        for (int num : numbers) {
            sum += num;
        }
        return sum;
    }

    public double average(int[] numbers) {
        return total(numbers) / (double) numbers.length;
    }
}

public class StatsDemo {
    public static void main(String[] args) {
        ConcreteStats stats = new ConcreteStats();
        int[] numbers = {5, 7, 2, 8, 5, 3, 7};

        System.out.println("Total: " + stats.total(numbers));
        System.out.println("Average: " + stats.average(numbers));
        System.out.println("Mean: " + stats.mean(numbers));
        System.out.println("Mode: " + stats.mode(numbers));
        System.out.println("Median: " + stats.median(numbers));
    }
}
