public class IllegalArgumentExceptionDemo {
    public static void main(String[] args) {
        try {
            int value = -5;
            validateNonNegative(value);
        } catch (IllegalArgumentException e) {
            System.out.println("IllegalArgumentException: Negative Argument in the method requiring non-negative values");
        }

        try {
            String invalidEnum = "INVALID";
            validateEnum(EnumType.valueOf(invalidEnum)); 
        } catch (IllegalArgumentException e) {
            System.out.println("IllegalArgumentException: Invalid Enum Constant Passed to a Method");
        }

        try {
            int start = 10;
            int end = 5;
            validateRange(start, end); 
        } catch (IllegalArgumentException e) {
            System.out.println("IllegalArgumentException: Setting an Invalid Range for a Method Parameter");
        }

        try {
            String emptyString = "";
            validateNonEmptyString(emptyString); 
        } catch (IllegalArgumentException e) {
            System.out.println("IllegalArgumentException: Empty or Null String Argument in a Method Requiring Non-Empty Strings");
        }
    }

    public static void validateNonNegative(int value) {
        if (value < 0) {
            throw new IllegalArgumentException("Value must be non-negative.");
        }
    }

    public static void validateEnum(EnumType type) {
        if (type == null) {
            throw new IllegalArgumentException("Invalid enum constant.");
        }
    }

    public static void validateRange(int start, int end) {
        if (start > end) {
            throw new IllegalArgumentException("Invalid range: start > end.");
        }
    }

    public static void validateNonEmptyString(String str) {
        if (str == null || str.isEmpty()) {
            throw new IllegalArgumentException("String must be non-empty.");
        }
    }

    public enum EnumType {
        ENUM_1,
        ENUM_2,
        ENUM_3
    }
}
